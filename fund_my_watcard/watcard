#!/usr/bin/env python

import argparse
import json
import os
import time
import base64
import platform
import subprocess

from cryptography.fernet import Fernet
from splinter import Browser
from webdriver_manager.chrome import ChromeDriverManager
from selenium import webdriver
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.fernet import InvalidToken

CONFIG_FILE_PATH = os.path.expanduser("~") + "/.watcard_config"
PRINT_PREFIX = "[fund-my-watcard] "
SALT = b"x\xe6}\xb5\r+\xbf\xa2\x10+\xed\x94Q\xc2\x14+"


def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    Args:
        question: a string that is presented to the user.
        default: the presumed answer if the user just hits <Enter>. It must be "yes" (the default),
        "no" or None (meaning an answer is required of the user).

    Returns:
        True for "yes" or False for "no".
    """
    valid = {"yes": True, "y": True, "ye": True, "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        print(question + prompt)
        choice = input().lower()
        if default is not None and choice == "":
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            print("Please respond with 'yes' or 'no' (or 'y' or 'n').\n")


def open_config_file():
    operating_system = platform.system()
    if operating_system == "Linux":
        subprocess.call(["vi", CONFIG_FILE_PATH])
    elif operating_system == "Windows":
        subprocess.call(["notepad.exe", CONFIG_FILE_PATH])
    elif operating_system == "Darwin":
        subprocess.call(["open", CONFIG_FILE_PATH])


def generate_config_file():
    if os.path.isfile(CONFIG_FILE_PATH):
        report_message("Config file '.watcard_config' already exists.")
        report_message("Opening " + CONFIG_FILE_PATH + ".")
        time.sleep(1)
        open_config_file()
        return

    write_template_to_config_file()
    report_message("Generate config file at user directory successfully. Please fill your information.")
    report_message("Opening " + CONFIG_FILE_PATH + ".")
    time.sleep(1)
    os.system("vim {}".format(CONFIG_FILE_PATH))


def reset_config_file():
    write_template_to_config_file()
    report_message("Reset config file successfully. Try 'watcard --config' to fill your information.")


def write_template_to_config_file):
    _config_info = {
        "userName": "WatIAM username",
        "password": "WatIAM username",
        "ordName": "Name on the credit card",
        "phoneNumber": "Phone number",
        "address1": "Home address 1",
        "address2": "Home address 2 (Blank if no address2)",
        "ordPostalCode": "Postal code",
        "ordCity": "City",
        "ordEmailAddress": "Email address",
        "paymentMethod": "Payment method ('CC' for 'Credit Card')",
        "trnCardOwner": "Card owner",
        "trnCardType": "Card type ('VI' for 'Visa', 'MC' for 'Master Card', see more card types in README)",
        "trnCardNumber": "Card number",
        "trnExpMonth": "Expiry month",
        "trnExpYear": "Expiry year",
        "trnCardCvd": "Card CVD (3 digit number on the back of the card)",
        "encrypted": "False",
    }
    with open(CONFIG_FILE_PATH, "w+") as f:
        json.dump(_config_info, f, indent=2)
    assert os.path.isfile(CONFIG_FILE_PATH) is True


def input_and_encrypt_password():
    return encrypt_password(input(PRINT_PREFIX + "Please input your password: ").encode())


def encrypt_password(password):
    kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=SALT, iterations=100000, backend=default_backend())
    return base64.urlsafe_b64encode(kdf.derive(password))


def encrypt_config_file(config: dict, f: Fernet) -> dict:
    for k, v in config.items():
        config[k] = f.encrypt(v.encode()).decode("utf8")
    return config


def decrypt_config_file(config: dict, f: Fernet) -> dict:
    try:
        f.decrypt(config["encrypted"].encode())
    except InvalidToken:
        report_error("Invalid password. Decrypting config file failed.")
    for k, v in config.items():
        config[k] = f.decrypt(v.encode()).decode("utf8")
    return config


def report_error(msg: str):
    print(PRINT_PREFIX + msg)
    exit(1)


def report_message(msg: str):
    print(PRINT_PREFIX + msg)


class MyWatCard:
    def __init__(self, **kwargs):
        self.userName = kwargs["userName"]
        self.password = kwargs["password"]
        self.ordName = kwargs["ordName"]
        self.phoneNumber = kwargs["phoneNumber"]
        self.ordAddress1 = kwargs["address1"]
        self.ordAddress2 = None if len(kwargs["address2"]) == 0 else kwargs["address2"]
        self.ordCity = kwargs["ordCity"]
        self.ordPostalCode = kwargs["ordPostalCode"]
        self.ordEmailAddress = kwargs["ordEmailAddress"]
        self.paymentMethod = kwargs["paymentMethod"]
        self.trnCardOwner = kwargs["trnCardOwner"]
        self.trnCardType = kwargs["trnCardType"]
        self.trnCardNumber = kwargs["trnCardNumber"]
        self.trnExpMonth = kwargs["trnExpMonth"]
        self.trnExpYear = kwargs["trnExpYear"]
        self.trnCardCvd = kwargs["trnCardCvd"]
        self.trnAmount = 0

    def add_fund(self, amount):
        try:
            chrome_options = webdriver.ChromeOptions()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--incognito")
            with Browser(
                "chrome", **{"executable_path": ChromeDriverManager().install()}, options=chrome_options
            ) as browser:
                browser.visit("https://watcard.uwaterloo.ca/OneWebUW/addfunds_watiam.asp")
                browser.fill("UserName", self.userName)
                browser.fill("Password", self.password)
                button = browser.find_by_name("submit")
                button.click()
                time.sleep(2)

                browser.fill("ordName", self.ordName)
                browser.fill("ordPhoneNumber", self.phoneNumber)
                browser.fill("ordAddress1", self.ordAddress1)
                if self.ordAddress2 is not None:
                    browser.fill("ordAddress2", self.ordAddress2)
                browser.fill("ordCity", self.ordCity)
                browser.fill("ordPostalCode", self.ordPostalCode)
                browser.fill("ordEmailAddress", self.ordEmailAddress)
                browser.fill("trnAmount", str(amount))
                browser.find_by_name("paymentMethod").first.select(self.paymentMethod)
                browser.fill("trnCardOwner", self.trnCardOwner)
                browser.find_by_name("trnCardType").first.select(self.trnCardType)
                browser.fill("trnCardNumber", self.trnCardNumber)
                browser.find_by_name("trnExpMonth").first.select(self.trnExpMonth)
                browser.find_by_name("trnExpYear").first.select(self.trnExpYear)
                browser.fill("trnCardCvd", self.trnCardCvd)
                button = browser.find_by_name("submitButton")
                button.click()
                if browser.find_by_text("Funds were added to your card.").first is not None:
                    return True
        except Exception as e:
            report_message(str(e))
            return False

    def check_balance(self):
        pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Fund my WatCard: A tool that add funds to your WatCard easily.")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-c", "--config", help="generate the config file", action="store_true")
    group.add_argument("-f", "--fund", type=float, help="the amount to add into the WatCard", action="store")
    group.add_argument("-v", "--version", help="show the version of fund-my-watcard", action="store_true")
    group.add_argument(
        "-e", "--encrypt", help="encrypt the config file with user defined password", action="store_true"
    )
    group.add_argument("-d", "--decrypt", help="decrypt the config file so you can edit it", action="store_true")
    group.add_argument("-r", "--reset", help="reset the config file", action="store_true")
    args = parser.parse_args()

    if args.config:
        generate_config_file()

    if args.fund:
        amount = round(args.fund, 2)
        if os.path.isfile(CONFIG_FILE_PATH):
            with open(CONFIG_FILE_PATH) as f:
                _config = json.load(f)
            if _config["encrypted"] != "False":
                report_message("Config file has been encrypted, needs to be decrypted at first.")
                f = Fernet(input_and_encrypt_password())
                decrypt_config_file(_config, f)
            _my_wat_card = MyWatCard(**_config)
            res = _my_wat_card.add_fund(amount)
            if res:
                report_message("Adding ${} to account {} successfully.".format(amount, _config["userName"]))
            else:
                report_message("Adding ${} to account {} failed.".format(amount, _config["userName"]))
        else:
            report_error("Cannot find config file under user directory, try 'watcard --config'.")

    if args.version:
        print("fund-my-watcard v{}".format("0.2.1"))

    if args.encrypt:
        if query_yes_no(PRINT_PREFIX + "This will encrypt your config file! Do you want to proceed?", "no"):
            if os.path.isfile(CONFIG_FILE_PATH):
                with open(CONFIG_FILE_PATH) as f:
                    _config = json.load(f)
            else:
                report_error("Cannot find config file under user directory, try 'watcard --config'.")

            if _config["encrypted"] != "False":
                report_message("Your config file is already encrypted. To decrypt it, please try 'watcard -d'.")
            else:
                if os.path.isfile(CONFIG_FILE_PATH):
                    with open(CONFIG_FILE_PATH) as f:
                        _config = json.load(f)
                else:
                    report_error("Cannot find config file under user directory, try 'watcard --config'.")

                f = Fernet(encrypt_password(input(PRINT_PREFIX + "Please input your password: ").encode()))
                _encrypted_config_info = encrypt_config_file(_config, f)

                with open(CONFIG_FILE_PATH, "w+") as json_file:
                    json.dump(_encrypted_config_info, json_file, indent=2)

                report_message("Config file successfully encrypted.")

    if args.decrypt:
        if query_yes_no(PRINT_PREFIX + "This will decrypt your config file! Do you want to proceed?", "no"):
            if os.path.isfile(CONFIG_FILE_PATH):
                with open(CONFIG_FILE_PATH) as f:
                    _config = json.load(f)
            else:
                report_error("Cannot find config file under user directory, try 'watcard --config'.")

            if _config["encrypted"] == "False":
                report_message("Your config file is already decrypted. To encrypt it, please use 'watcard -e'.")
            else:
                if os.path.isfile(CONFIG_FILE_PATH):
                    with open(CONFIG_FILE_PATH) as f:
                        _config = json.load(f)
                else:
                    report_error("Cannot find config file under user directory, try 'watcard --config'.")

                f = Fernet(input_and_encrypt_password())
                _decrypted_config_info = decrypt_config_file(_config, f)

                with open(CONFIG_FILE_PATH, "w+") as json_file:
                    json.dump(_decrypted_config_info, json_file, indent=2)

                report_message("Config file successfully decrypted.")

    if args.reset:
        if query_yes_no(PRINT_PREFIX + "This will reset your config file! Do you want to proceed?", "no"):
            reset_config_file()

    if not (args.config or args.fund or args.version or args.encrypt or args.decrypt or args.reset):
        parser.parse_args(["-h"])
