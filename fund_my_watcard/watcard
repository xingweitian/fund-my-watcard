#!/usr/bin/env python

import argparse
import json
import os
import time
import base64

from splinter import Browser
from webdriver_manager.chrome import ChromeDriverManager
from selenium import webdriver
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

CONFIG_FILE_PATH = os.path.expanduser("~") + "/.watcard_config"
PRINT_PREFIX = "[fund-my-watcard] "


def generate_config_file():
    if os.path.isfile(CONFIG_FILE_PATH):
        print(PRINT_PREFIX + "Config file '.watcard_config' already exists.")
        print(PRINT_PREFIX + "Opening " + CONFIG_FILE_PATH + ".")
        time.sleep(1)
        os.system("vim {}".format(CONFIG_FILE_PATH))
        return

    _config_info = {
        "userName": "User name of WatIM",
        "password": "Password of WatIM",
        "ordName": "Name on the credit card",
        "phoneNumber": "Phone number",
        "address1": "Home address 1",
        "address2": "Home address 2 (Remove all the characters if no address2)",
        "ordPostalCode": "Postal code",
        "ordCity": "City",
        "ordEmailAddress": "Email address",
        "paymentMethod": "The payment method ('CC' for 'Credit Card')",
        "trnCardOwner": "Card owner",
        "trnCardType": "Card type ('VI' for 'Visa', 'MC' for 'Master Card')",
        "trnCardNumber": "Card number",
        "trnExpMonth": "Expire month",
        "trnExpYear": "Expire year",
        "trnCardCvd": "Card CVD (3 digit numbers on the back of card)",
    }
    with open(CONFIG_FILE_PATH, "w+") as json_file:
        json.dump(_config_info, json_file, indent=2)
    assert os.path.isfile(CONFIG_FILE_PATH) is True
    print(PRINT_PREFIX + "Generate config file at user directory successfully. Please fill your information.")
    print(PRINT_PREFIX + "Opening " + CONFIG_FILE_PATH + ".")
    time.sleep(1)
    os.system("vim {}".format(CONFIG_FILE_PATH))


class MyWatCard:
    def __init__(self, **kwargs):
        self.userName = kwargs["userName"]
        self.password = kwargs["password"]
        self.ordName = kwargs["ordName"]
        self.phoneNumber = kwargs["phoneNumber"]
        self.ordAddress1 = kwargs["address1"]
        self.ordAddress2 = None if len(kwargs["address2"]) == 0 else kwargs["address2"]
        self.ordCity = kwargs["ordCity"]
        self.ordPostalCode = kwargs["ordPostalCode"]
        self.ordEmailAddress = kwargs["ordEmailAddress"]
        self.paymentMethod = kwargs["paymentMethod"]
        self.trnCardOwner = kwargs["trnCardOwner"]
        self.trnCardType = kwargs["trnCardType"]
        self.trnCardNumber = kwargs["trnCardNumber"]
        self.trnExpMonth = kwargs["trnExpMonth"]
        self.trnExpYear = kwargs["trnExpYear"]
        self.trnCardCvd = kwargs["trnCardCvd"]
        self.trnAmount = 0

    def add_fund(self, amount):
        try:
            chrome_options = webdriver.ChromeOptions()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--incognito")
            with Browser(
                "chrome", **{"executable_path": ChromeDriverManager().install()}, options=chrome_options
            ) as browser:
                browser.visit("https://watcard.uwaterloo.ca/OneWebUW/addfunds_watiam.asp")
                browser.fill("UserName", self.userName)
                browser.fill("Password", self.password)
                button = browser.find_by_name("submit")
                button.click()
                time.sleep(2)

                browser.fill("ordName", self.ordName)
                browser.fill("ordPhoneNumber", self.phoneNumber)
                browser.fill("ordAddress1", self.ordAddress1)
                if self.ordAddress2 is not None:
                    browser.fill("ordAddress2", self.ordAddress2)
                browser.fill("ordCity", self.ordCity)
                browser.fill("ordPostalCode", self.ordPostalCode)
                browser.fill("ordEmailAddress", self.ordEmailAddress)
                browser.fill("trnAmount", str(amount))
                browser.find_by_name("paymentMethod").first.select(self.paymentMethod)
                browser.fill("trnCardOwner", self.trnCardOwner)
                browser.find_by_name("trnCardType").first.select(self.trnCardType)
                browser.fill("trnCardNumber", self.trnCardNumber)
                browser.find_by_name("trnExpMonth").first.select(self.trnExpMonth)
                browser.find_by_name("trnExpYear").first.select(self.trnExpYear)
                browser.fill("trnCardCvd", self.trnCardCvd)
                button = browser.find_by_name("submitButton")
                button.click()
                if browser.find_by_text("Funds were added to your card.").first is not None:
                    return True
        except Exception as e:
            print(str(e))
            return False

    def check_balance(self):
        pass


class NoConfigFileException(Exception):
    """Raised when config file is not found."""

    def __init__(self, message=PRINT_PREFIX + "Cannot find config file under user directory, try 'watcard --config'."):
        super(NoConfigFileException, self).__init__(message)
        self.message = message


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Fund my WatCard: A tool to add funds to WatCard easily.")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-c", "--config", help="generate the config file", action="store_true")
    group.add_argument("-f", "--fund", type=float, help="the amount to add into the WatCard", action="store")
    group.add_argument("-v", "--version", help="show the version of fund-my-watcard", action="store_true")
    args = parser.parse_args()

    if args.config:
        # Prompt user to enter a password when they create the config file
        password_provided_initial = input("Please enter a password to protect your config file: ")
        password_provided_confirm = input("Please confirm your password: ")

        password = 0

        while password_provided_initial != password_provided_confirm:
            print("Passwords do not match. Please try again.")
            password_provided_initial = input("Please enter a password to protect your config file: ")
            password_provided_confirm = input("Please confirm your password: ")

        password = password_provided_initial.encode()

        # Randomly generated salt (use the same one)
        salt = b"x\xe6}\xb5\r+\xbf\xa2\x10+\xed\x94Q\xc2\x14+"

        kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=salt, iterations=100000, backend=default_backend())

        key = base64.urlsafe_b64encode(kdf.derive(password))

        # Save the key to a file
        file = open("key.key", "wb")
        file.write(key)
        file.close()

        generate_config_file()

    if args.fund:
        amount = round(args.fund, 2)
        if os.path.isfile(CONFIG_FILE_PATH):
            with open(CONFIG_FILE_PATH) as f:
                _config = json.load(f)
            _my_wat_card = MyWatCard(**_config)
            res = _my_wat_card.add_fund(amount)
            if res:
                print(PRINT_PREFIX + "Adding ${} to account {} successfully.".format(amount, _config["userName"]))
            else:
                print(PRINT_PREFIX + "Adding ${} to account {} failed.".format(amount, _config["userName"]))
        else:
            raise NoConfigFileException()

    if args.version:
        print("fund-my-watcard v{}".format("0.2.1"))

    if not args.config and not args.fund and not args.version:
        parser.parse_args(["-h"])
